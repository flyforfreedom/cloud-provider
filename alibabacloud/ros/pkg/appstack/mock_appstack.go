// Code generated by MockGen. DO NOT EDIT.
// Source: appstack.go

// Package appstack is a generated GoMock package.
package appstack

import (
	gomock "github.com/golang/mock/gomock"
	ros "github.com/oam-dev/cloud-provider/alibabacloud/ros/pkg/ros"
	reflect "reflect"
)

// MockAppStackOption is a mock of AppStackOption interface
type MockAppStackOption struct {
	ctrl     *gomock.Controller
	recorder *MockAppStackOptionMockRecorder
}

// MockAppStackOptionMockRecorder is the mock recorder for MockAppStackOption
type MockAppStackOptionMockRecorder struct {
	mock *MockAppStackOption
}

// NewMockAppStackOption creates a new mock instance
func NewMockAppStackOption(ctrl *gomock.Controller) *MockAppStackOption {
	mock := &MockAppStackOption{ctrl: ctrl}
	mock.recorder = &MockAppStackOptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppStackOption) EXPECT() *MockAppStackOptionMockRecorder {
	return m.recorder
}

// apply mocks base method
func (m *MockAppStackOption) apply(arg0 *appStackOption) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "apply", arg0)
}

// apply indicates an expected call of apply
func (mr *MockAppStackOptionMockRecorder) apply(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "apply", reflect.TypeOf((*MockAppStackOption)(nil).apply), arg0)
}

// MockAppStackInterface is a mock of AppStackInterface interface
type MockAppStackInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAppStackInterfaceMockRecorder
}

// MockAppStackInterfaceMockRecorder is the mock recorder for MockAppStackInterface
type MockAppStackInterfaceMockRecorder struct {
	mock *MockAppStackInterface
}

// NewMockAppStackInterface creates a new mock instance
func NewMockAppStackInterface(ctrl *gomock.Controller) *MockAppStackInterface {
	mock := &MockAppStackInterface{ctrl: ctrl}
	mock.recorder = &MockAppStackInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppStackInterface) EXPECT() *MockAppStackInterfaceMockRecorder {
	return m.recorder
}

// GetSecretName mocks base method
func (m *MockAppStackInterface) GetSecretName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSecretName indicates an expected call of GetSecretName
func (mr *MockAppStackInterfaceMockRecorder) GetSecretName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretName", reflect.TypeOf((*MockAppStackInterface)(nil).GetSecretName))
}

// GetOutputSecretName mocks base method
func (m *MockAppStackInterface) GetOutputSecretName(compInstanceName string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutputSecretName", compInstanceName)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOutputSecretName indicates an expected call of GetOutputSecretName
func (mr *MockAppStackInterfaceMockRecorder) GetOutputSecretName(compInstanceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutputSecretName", reflect.TypeOf((*MockAppStackInterface)(nil).GetOutputSecretName), compInstanceName)
}

// GetData mocks base method
func (m *MockAppStackInterface) GetData() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetData indicates an expected call of GetData
func (mr *MockAppStackInterfaceMockRecorder) GetData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockAppStackInterface)(nil).GetData))
}

// GetStack mocks base method
func (m *MockAppStackInterface) GetStack() (*ros.Stack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStack")
	ret0, _ := ret[0].(*ros.Stack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStack indicates an expected call of GetStack
func (mr *MockAppStackInterfaceMockRecorder) GetStack() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStack", reflect.TypeOf((*MockAppStackInterface)(nil).GetStack))
}

// GetStatus mocks base method
func (m *MockAppStackInterface) GetStatus() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus
func (mr *MockAppStackInterfaceMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockAppStackInterface)(nil).GetStatus))
}

// SetIdAndTemplate mocks base method
func (m *MockAppStackInterface) SetIdAndTemplate(stackId, templateBody string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIdAndTemplate", stackId, templateBody)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetIdAndTemplate indicates an expected call of SetIdAndTemplate
func (mr *MockAppStackInterfaceMockRecorder) SetIdAndTemplate(stackId, templateBody interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIdAndTemplate", reflect.TypeOf((*MockAppStackInterface)(nil).SetIdAndTemplate), stackId, templateBody)
}

// SetError mocks base method
func (m *MockAppStackInterface) SetError(e error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetError", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetError indicates an expected call of SetError
func (mr *MockAppStackInterfaceMockRecorder) SetError(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetError", reflect.TypeOf((*MockAppStackInterface)(nil).SetError), e)
}

// SetProgressing mocks base method
func (m *MockAppStackInterface) SetProgressing() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProgressing")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProgressing indicates an expected call of SetProgressing
func (mr *MockAppStackInterfaceMockRecorder) SetProgressing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProgressing", reflect.TypeOf((*MockAppStackInterface)(nil).SetProgressing))
}

// SetReady mocks base method
func (m *MockAppStackInterface) SetReady() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReady")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReady indicates an expected call of SetReady
func (mr *MockAppStackInterfaceMockRecorder) SetReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReady", reflect.TypeOf((*MockAppStackInterface)(nil).SetReady))
}

// SaveOutputs mocks base method
func (m *MockAppStackInterface) SaveOutputs(stack *ros.Stack) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveOutputs", stack)
}

// SaveOutputs indicates an expected call of SaveOutputs
func (mr *MockAppStackInterfaceMockRecorder) SaveOutputs(stack interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOutputs", reflect.TypeOf((*MockAppStackInterface)(nil).SaveOutputs), stack)
}

// IsProgressing mocks base method
func (m *MockAppStackInterface) IsProgressing() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProgressing")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsProgressing indicates an expected call of IsProgressing
func (mr *MockAppStackInterfaceMockRecorder) IsProgressing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProgressing", reflect.TypeOf((*MockAppStackInterface)(nil).IsProgressing))
}

// IsFailed mocks base method
func (m *MockAppStackInterface) IsFailed() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFailed")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFailed indicates an expected call of IsFailed
func (mr *MockAppStackInterfaceMockRecorder) IsFailed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFailed", reflect.TypeOf((*MockAppStackInterface)(nil).IsFailed))
}

// Delete mocks base method
func (m *MockAppStackInterface) Delete() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockAppStackInterfaceMockRecorder) Delete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAppStackInterface)(nil).Delete))
}
