// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aliyun/alibaba-cloud-sdk-go/sdk/errors (interfaces: Error)

// Package ros is a generated GoMock package.
package ros

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockError is a mock of Error interface
type MockError struct {
	ctrl     *gomock.Controller
	recorder *MockErrorMockRecorder
}

// MockErrorMockRecorder is the mock recorder for MockError
type MockErrorMockRecorder struct {
	mock *MockError
}

// NewMockError creates a new mock instance
func NewMockError(ctrl *gomock.Controller) *MockError {
	mock := &MockError{ctrl: ctrl}
	mock.recorder = &MockErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockError) EXPECT() *MockErrorMockRecorder {
	return m.recorder
}

// Error mocks base method
func (m *MockError) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error
func (mr *MockErrorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockError)(nil).Error))
}

// ErrorCode mocks base method
func (m *MockError) ErrorCode() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrorCode")
	ret0, _ := ret[0].(string)
	return ret0
}

// ErrorCode indicates an expected call of ErrorCode
func (mr *MockErrorMockRecorder) ErrorCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorCode", reflect.TypeOf((*MockError)(nil).ErrorCode))
}

// HttpStatus mocks base method
func (m *MockError) HttpStatus() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HttpStatus")
	ret0, _ := ret[0].(int)
	return ret0
}

// HttpStatus indicates an expected call of HttpStatus
func (mr *MockErrorMockRecorder) HttpStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HttpStatus", reflect.TypeOf((*MockError)(nil).HttpStatus))
}

// Message mocks base method
func (m *MockError) Message() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Message")
	ret0, _ := ret[0].(string)
	return ret0
}

// Message indicates an expected call of Message
func (mr *MockErrorMockRecorder) Message() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Message", reflect.TypeOf((*MockError)(nil).Message))
}

// OriginError mocks base method
func (m *MockError) OriginError() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OriginError")
	ret0, _ := ret[0].(error)
	return ret0
}

// OriginError indicates an expected call of OriginError
func (mr *MockErrorMockRecorder) OriginError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OriginError", reflect.TypeOf((*MockError)(nil).OriginError))
}
